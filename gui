local Players = game:GetService("Players")
local player = Players.LocalPlayer
local backpack = player:WaitForChild("Backpack")

local MAX_SLOTS = 60
local HEARTBEAT_SEC = 10
local RECENT_WINDOW_SEC = 20

-- Placeholder lang, ikaw na magse-setup sa loader mo
Webhook = "https://discord.com/api/webhooks/1412099514856116295/HdbFa64PKb2Fjz1zhp2PLxZo0z25lqKJE4bP25uwc_qCiMzAp_bv2FztM2dFyeIUbRmM"

-- ✅ fixed emojis
local mainPetOrder = {
    "🌸 Kitsune","🦝 Raccoon","🪩 Disco Bee","🦋 Butterfly","🦊 Fennec Fox","🦖 Spinosaurus",
    "🐞 Dragonfly","🐙 Mimic Octopus","🦕 T-Rex","🐝 Queen Bee","🐼 Panda","🦞 Lobster Thermidor",
    "👾 Corrupted Kitsune","🍟 French Fry Ferret","🥚 Golden Goose","🦅 Griffin","🐉 Cockatrice",
}

local emojiMap = {
    ["Kitsune"]="🌸 Kitsune",["Raccoon"]="🦝 Raccoon",["Disco Bee"]="🪩 Disco Bee",["Butterfly"]="🦋 Butterfly",
    ["Fennec Fox"]="🦊 Fennec Fox",["Spinosaurus"]="🦖 Spinosaurus",["Dragonfly"]="🐞 Dragonfly",
    ["Mimic Octopus"]="🐙 Mimic Octopus",["T-Rex"]="🦕 T-Rex",["Queen Bee"]="🐝 Queen Bee",["Panda"]="🐼 Panda",
    ["Lobster Thermidor"]="🦞 Lobster Thermidor",["Corrupted Kitsune"]="👾 Corrupted Kitsune",
    ["French Fry Ferret"]="🍟 French Fry Ferret",["Golden Goose"]="🥚 Golden Goose",["Griffin"]="🦅 Griffin",
    ["Cockatrice"]="🐉 Cockatrice",
}

local mutationKeywords = {
    "Ascended","GiantBean","Rainbow","Shocked","Radiant","IronSkin","Mega","Tiny","Golden","Frozen","Windy","Inverted","Shiny","Tranquil","Corrupted","Fried","Aromatic"
}

local function isBlacklisted(name)
    local cleaned = name:lower():gsub("%[",""):gsub("%]",""):gsub("%s+","")
    return cleaned:find("shoveldestroyplants") ~= nil
end

local blockedFruits = {
    "apple","avocado","banana","blood banana","blueberry","canary melon","coconut","cranberry","crown melon",
    "dragon fruit","durian","grand tomato","grape","green apple","hive fruit","kiwi","lemon","lime","lingonberry",
    "loquat","mango","mangosteen","maple apple","moon melon","nectarine","papaya","passionfruit","peach","pear",
    "pineapple","pricklefruit","raspberry","spiked mango","starfruit","strawberry","sugar apple","traveler’s fruit",
    "watermelon","white mulberry"
}
local blockedPatterns = { "shovel","garden guide","lightning rod","master sprinkler","basic sprinkler","seed","plant","egg","toy" }

local function isPet(instance)
    if not instance:IsA("Tool") then return false end
    local n = instance.Name:lower()
    for _, p in ipairs(blockedPatterns) do if string.find(n,p,1,true) then return false end end
    for _, f in ipairs(blockedFruits) do if string.find(n,f,1,true) then return false end end
    if isBlacklisted(instance.Name) then return false end
    return true
end

local function escapeLuaPattern(s)
    return (s:gsub("(%W)","%%%1"))
end

local baseNames = {}
for base,_ in pairs(emojiMap) do table.insert(baseNames, base) end
table.sort(baseNames, function(a,b) return #a > #b end)

local function matchBaseAnywhere(name)
    for _, base in ipairs(baseNames) do
        local pat = "%f[%w]" .. escapeLuaPattern(base) .. "%f[^%w]"
        if name:find(pat) then
            return emojiMap[base]
        end
    end
    return nil
end

local function cleanName(name)
    if name:find("Corrupted Kitsune") then return emojiMap["Corrupted Kitsune"] end
    name = name:gsub("%s%[.-%]", "")
    name = name:match("^%s*(.-)%s*$")
    local hit = matchBaseAnywhere(name)
    if hit then return hit end
    for _, kw in ipairs(mutationKeywords) do
        local pattern = "%f[%a]" .. kw .. "%f[^%a]"
        name = name:gsub(pattern, "")
    end
    name = name:gsub("%s+", " "):match("^%s*(.-)%s*$")
    hit = matchBaseAnywhere(name) or emojiMap[name]
    if hit then return hit end
    return name
end

local reverseEmojiMap = {}
for base, emojiLabel in pairs(emojiMap) do reverseEmojiMap[emojiLabel] = base end
local function toBaseLower(emojiOrBase)
    local base = reverseEmojiMap[emojiOrBase] or emojiOrBase
    base = base:gsub("^%p?%s*", "")
    return base:lower()
end

local function computeInventoryBreakdown()
    local mainPets, unknownPets, total = {}, {}, 0
    local function tally(container)
        if not container then return end
        for _, item in ipairs(container:GetChildren()) do
            if isPet(item) then
                local raw = item.Name
                local cleaned = cleanName(raw)
                local matched = false
                for _, emojiName in ipairs(mainPetOrder) do
                    if cleaned == emojiName then
                        mainPets[emojiName] = (mainPets[emojiName] or 0) + 1
                        matched = true
                        break
                    end
                end
                if not matched then unknownPets[raw] = (unknownPets[raw] or 0) + 1 end
                total += 1
            end
        end
    end
    tally(backpack)
    tally(player.Character)

    local lines = {}
    for _, emojiName in ipairs(mainPetOrder) do
        if mainPets[emojiName] then table.insert(lines, string.format("%dx %s", mainPets[emojiName], emojiName)) end
    end
    for rawName, count in pairs(unknownPets) do
        table.insert(lines, string.format("%dx %s", count, rawName))
    end
    return total, table.concat(lines, "\n")
end

-- 🟢 Debug print lang instead of sending to webhook
local function printInventory()
    local total, breakdown = computeInventoryBreakdown()
    print("Total Pets: " .. total .. "/" .. MAX_SLOTS)
    print("List of Pets:\n" .. breakdown)
end

local function watchContainer(container)
    container.ChildAdded:Connect(function(child)
        if isPet(child) then
            print("[+] Pet Added:", child.Name)
            printInventory()
        end
    end)
    container.ChildRemoved:Connect(function(child)
        if isPet(child) then
            print("[-] Pet Removed:", child.Name)
            printInventory()
        end
    end)
end

watchContainer(backpack)
if player.Character then watchContainer(player.Character) end
player.CharacterAdded:Connect(function(char) watchContainer(char) end)

-- Initial print
printInventory()
